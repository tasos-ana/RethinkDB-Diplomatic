#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../server');
const debug = require('debug')('pushup :server');
const http = require('http');

const config = require('../config');
const db = require('../lib/services/database.service');


const defaultPort = config.server.listenPort;
const defaultAddress = config.server.listenAddress;

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || defaultPort);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, defaultAddress);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

const io = require('socket.io').listen(server);
var syncService = require('../lib/services/sync.service');

io.on('connection',function (socket) {
  var sync = new syncService();

  console.log('connection fired');
  socket.on('sync', function (gID){
     sync.feed(socket, gID);
  });

  socket.on('disconnect',function () {
    console.log('disconnect fired');
     sync.disconnect();
  });

  socket.on('logout', function () {
     sync.disconnect();
  });

  socket.emit('hello');

});

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    db.initDB();
    debug('Listening on address ' + defaultAddress + " at " + bind);
}
